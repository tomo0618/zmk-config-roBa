#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp E    &kp R      &kp T                                                     &kp Y          &kp U  &kp I                &kp O                    &kp P
&kp A             &kp S           &kp D    &kp F      &kp G            &kp LS(LG(V))      &kp DELETE            &kp H          &kp J  &kp K                &kp L                    &kp MINUS
&kp Z             &kp X           &kp C    &kp V      &kp B            &kp LEFT_ALT       &kp LEFT_PARENTHESIS  &kp N          &kp M  &mt LESS_THAN COMMA  &mt GREATER_THAN PERIOD  &kp RIGHT_PARENTHESIS
&kp LG(LEFT_GUI)  &kp LEFT_SHIFT  &kp TAB  &kp SPACE  &lt 1 LC(SPACE)  &lt 2 LG(M)        &kp ENTER             &kp BACKSPACE                                                       &lt 2 LG(TAB)
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        num {
            bindings = <
&kp F9        &kp F10         &kp F11     &kp F12    &kp LEFT_BRACKET                                                              &mt SEMICOLON COLON  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &mt LESS_THAN GREATER_THAN
&kp F5        &kp F6          &kp LC(I)   &kp F8     &kp RIGHT_BRACKET  &kp LS(LG(V))      &mt RIGHT_PARENTHESIS LEFT_PARENTHESIS  &mt ASTERISK SLASH   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &mt PLUS MINUS
&kp F1        &kp F2          &kp F3      &kp F4     &kp LEFT_ALT       &kp LEFT_ALT       &mt COMMA PERIOD                        &kp NUMBER_0         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL
&kp LEFT_WIN  &kp LEFT_SHIFT  &kp ESCAPE  &kp SPACE  &none              &bt BT_PRV         &kp ENTER                               &kp BACKSPACE                                                  &none
            >;
        };

        vector {
            bindings = <
&none         &kp LG(W)       &kp LG(P)      &kp LC(H)  &kp RS(RG(NUMBER_3))                                    &kp PERCENT     &mkp MB4   &mkp MCLK     &mkp MB5   &kp HASH
&kp LG(A)     &kp LG(S)       &kp RS(RG(S))  &kp LG(F)  &kp C_AC_ZOOM_OUT     &kp LS(LG(V))      &kp LG(LS(Z))  &kp AMPERSAND   &mkp LCLK  &kp UP_ARROW  &mkp RCLK  &kp AT_SIGN
&kp LG(Z)     &kp LG(X)       &kp LG(C)      &kp LG(V)  &kp C_AC_ZOOM_IN      &kp LEFT_ALT       &kp LG(Z)      &kp UNDERSCORE  &kp LEFT   &kp DOWN      &kp RIGHT  &kp EXCLAMATION
&kp LEFT_WIN  &kp LEFT_SHIFT  &kp ESCAPE     &kp SPACE  &bt BT_NXT            &none              &kp ENTER      &kp BACKSPACE                                       &kp QUESTION
            >;
        };
    };
};
