#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        bt0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <39 38>;
        };

        bt3 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <28 16>;
        };

        bt4 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <40 41>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q            &kp W            &kp E            &kp R            &kp T                                          &kp Y            &kp U            &kp I            &kp O            &kp P
&kp A            &kp S            &kp D            &kp F            &kp G            &kp LG(TAB)      &kp DELETE      &kp H            &kp J            &kp K            &kp L            &kp MINUS
&kp Z            &kp X            &kp C            &kp V            &kp B            &kp LEFT_SHIFT   &kp BACKSPACE   &kp N            &kp M            &mt GREATER_THAN COMMA &mt LESS_THAN PERIOD &mt RIGHT_PARENTHESIS LEFT_PARENTHESIS
&kp LG(LEFT_GUI) &kp LEFT_ALT     &kp LC(UP_ARROW) &kp SPACE        &lt 1 LC(SPACE)  &lt 3 LS(LG(V))  &kp ENTER       &lt 2 BACKSPACE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        num {
            bindings = <
&kp F9         &kp F10        &kp F11        &kp F12        &kp LEFT_BRACKET                                &mt RIGHT_PARENTHESIS LEFT_PARENTHESIS &kp N7 &kp N8 &kp N9 &mt GREATER_THAN LESS_THAN
&kp F5         &kp F6         &kp LC(I)      &kp F8         &kp RIGHT_BRACKET &kp LS(LG(V))      &mt SEMICOLON COLON  &mt ASTERISK SLASH   &kp N4 &kp N5 &kp N6 &mt PLUS MINUS
&kp F1         &kp F2         &kp F3         &kp F4         &kp LEFT_ALT      &kp LEFT_SHIFT     &kp BACKSPACE        &mt COMMA PERIOD     &kp N1 &kp N2 &kp N3 &mt UNDER EQUAL
&kp LEFT_WIN   &kp LEFT_ALT   &kp LC(UP_ARROW) &kp SPACE      &none             &bt BT_SEL 1       &kp ENTER            &mt BSPC N0          &kp ESC
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        vector {
            bindings = <
&none        &kp LG(W)      &kp LG(P)      &kp LC(H)      &kp RS(RG(NUMBER_3))                                &kp LBKT         &kp RBKT         &kp DOUBLE_QUOTES &kp HASH    &kp BACKSPACE
&kp LG(A)    &kp LG(S)      &kp RS(RG(S))  &kp LG(F)      &kp C_AC_ZOOM_OUT &kp LS(LG(V))      &kp LG(LS(Z))      &kp GREATER_THAN &kp LESS_THAN    &kp UP      &kp AT_SIGN &kp PERCENT
&kp LG(Z)    &kp LG(X)      &kp LG(C)      &kp LG(V)      &kp C_AC_ZOOM_IN  &kp LEFT_SHIFT     &kp LG(Z)          &kp EXCLAMATION  &kp LEFT         &kp DOWN_ARROW &kp RIGHT   &kp QUESTION
&kp LEFT_WIN &kp LEFT_ALT   &kp LC(UP_ARROW) &kp SPACE      &bt BT_SEL 2      &none              &kp ENTER            &none            &kp ESCAPE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        mouse {
            bindings = <
&none  &none  &none        &none  &none                                   &kp LS(LG(DOWN_ARROW)) &kp LS(LG(UP_ARROW))   &kp LS(LA(LG(LEFT)))    &kp LS(LG(LA(UP_ARROW))) &none
&none  &none  &none        &none  &none            &none                   &kp LG(RIGHT)          &kp LS(LG(LEFT_ARROW)) &kp LS(LG(RIGHT))      &kp LS(LA(LG(DOWN_ARROW))) &kp LS(LA(LG(RIGHT)))  &none
&none  &none  &none        &none  &none            &none                   &kp LG(LEFT)           &mkp LCLK              &mkp RCLK              &mkp MB3                 &mkp MB4                  &mkp MB5
&none  &none  &kp LC(UP_ARROW) &none  &none            &none                   &none                  &none                  &kp ESCAPE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };
    };
};
