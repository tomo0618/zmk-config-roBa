#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_MOUSE_DEFAULT_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E             &kp R      &kp T                                                       &kp Y            &kp U  &kp I                &kp O                    &kp P
&kp A             &kp S         &kp D             &kp F      &kp G            &kp LG(TAB)          &kp DELETE            &kp H            &kp J  &kp K                &kp L                    &kp MINUS
&kp Z             &kp X         &kp C             &kp V      &kp B            &kp LEFT_SHIFT       &kp LEFT_PARENTHESIS  &kp N            &kp M  &mt LESS_THAN COMMA  &mt GREATER_THAN PERIOD  &kp RIGHT_PARENTHESIS
&kp LG(LEFT_GUI)  &kp LEFT_ALT  &kp LC(UP_ARROW)  &kp SPACE  &lt 1 LC(SPACE)  &lt 3 LS(LG(V))      &kp ENTER             &lt 2 BACKSPACE                                                       &kp TAB
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        num {
            bindings = <
&kp F9        &kp F10       &kp F11           &kp F12    &kp LEFT_BRACKET                                           &kp NUMBER_7  &kp NUMBER_8  &kp N9        &mt GREATER_THAN LESS_THAN  &kp BACKSPACE
&kp F5        &kp F6        &kp LC(I)         &kp F8     &kp RIGHT_BRACKET  &kp LS(LG(V))       &mt ASTERISK SLASH  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &mt PLUS MINUS              &mt SEMICOLON COLON
&kp F1        &kp F2        &kp F3            &kp F4     &kp LEFT_ALT       &kp LEFT_SHIFT      &mt COMMA PERIOD    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &mt UNDER EQUAL             &mt RIGHT_PARENTHESIS LEFT_PARENTHESIS
&kp LEFT_WIN  &kp LEFT_ALT  &kp LC(UP_ARROW)  &kp SPACE  &none              &bt BT_PRV          &kp ENTER           &kp NUMBER_0                                                          &kp ESC
            >;
        };

        vector {
            bindings = <
&none         &kp LG(W)     &kp LG(P)         &kp LC(H)  &kp RS(RG(NUMBER_3))                                     &mkp MB4        &mkp MCLK       &mkp MB5   &kp HASH         &kp BACKSPACE
&kp LG(A)     &kp LG(S)     &kp RS(RG(S))     &kp LG(F)  &kp C_AC_ZOOM_OUT     &kp LS(LG(V))       &kp LG(LS(Z))  &mkp LCLK       &kp UP_ARROW    &mkp RCLK  &kp AT_SIGN      &kp PERCENT
&kp LG(Z)     &kp LG(X)     &kp LG(C)         &kp LG(V)  &kp C_AC_ZOOM_IN      &kp LEFT_SHIFT      &kp LG(Z)      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp EXCLAMATION  &kp QUESTION
&kp LEFT_WIN  &kp LEFT_ALT  &kp LC(UP_ARROW)  &kp SPACE  &bt BT_NXT            &none               &kp ENTER      &none                                                       &kp ESCAPE
            >;
        };

        mouse {
            bindings = <
&none  &none  &none             &none  &none                            &kp LS(LG(DOWN_ARROW))  &kp LS(LG(UP_ARROW))  &kp LS(LA(LG(LEFT)))        &kp LS(LG(LA(UP_ARROW)))  &none
&none  &none  &none             &none  &none  &none      &kp LG(RIGHT)  &kp LS(LG(LEFT_ARROW))  &kp LS(LG(RIGHT))     &kp LS(LA(LG(DOWN_ARROW)))  &kp LS(LA(LG(RIGHT)))     &none
&none  &none  &none             &none  &none  &none      &kp LG(LEFT)   &mkp LCLK               &mkp RCLK             &mkp MB3                    &mkp MB4                  &mkp MB5
&none  &none  &kp LC(UP_ARROW)  &none  &none  &none      &none          &none                                                                                               &kp ESCAPE
            >;
        };
    };
};
